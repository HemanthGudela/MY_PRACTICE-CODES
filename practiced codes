1)Deleting Nth node froma linked list 
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) 
    {
        int count=0;
        ListNode *temp=head;
        if(head==0)
        return head;
        while(temp)
            {
                count++;
                temp=temp->next;
            }
        if(count==n)
        {
            head=head->next;//it means if head is pointing to 1st variable we are making 
            it ot point to 2nd variable and returning the head,hence the first variable is removed 
            return head;
        }
        temp=head;//everything went well here we need to re initialize temp 
        back to the head,so we could start from the 1st node
        n=count-n-1;
        count=0;
        while(temp)
        {
            if(count==n)
            {
                temp->next=temp->next->next;//it means when the count is equal to the required 
                position-1 then we could skip the the position by incrementing count->next to count->next->next
            }
            count++;
            temp=temp->next;
        }
        return head;
    }
};

2)REVERSE,SIZE,PRINT,SORT IN ASC ORDER,DESC ORDER.
void add_to_vector(vector<int> &A,int x)
{
	A.push_back(x);
}
void sort_vector_asc(vector<int> &A)
{
	sort(A.begin(),A.end());
}
void reverse_vector(vector<int> &A)
{
	reverse(A.begin(),A.end());
}
int size_of_vector(vector<int> &A)
{
	return(A.size());//Your code here
  }
void sort_vector_desc(vector<int> &A)
{
	sort(A.begin(),A.end(),greater<int>());//gretaer<data type>
}
void print_vector(vector<int> &A)
{
	for(int i=0;i<A.size();i++)
	cout<<A[i]<<" ";
}

3)CVheck if the kth bit is set or not 
1-by left shifting 1by k-1 bits and & with the binary form of N,
2-By right shifting the N by k-1 bits and perforning & with 1 
BOTH TC AND SC ARE O(1)FOR BOTH THE PROCESSES
bool checkKthBit(int n, int k)
    {
        return (1<<(k)&n)!=0;
    }
    
  4)Check if its an odd or an even integer
  
5)check if its a power of 2
  1-dvide by 2 continously at the end the last quotient should be 1;
  2-bit manipulation:we should left shift the X and & it with N,so when its 1 then its power of 2
  3-right shift N and & it with 1 then if its 1 then its power of 2 
  4-log2N then its floor,ceil comparision when both are equal then its power of 2 
  bool isPowerofTwo(long long n){
        if(n==0)
        return false;
        while(n>1&&(n&1)==0)
        {
            n=n>>1;
        }
        return (1&n==1);
    }
    
6)INTUITION:
Thing is your gonna traverse the vector from the back and you've pushed the INT_MAX into the stack if any number less than that would replace it in the stack;
Next if the current index elemeny in nums2 is positive and if its greather tha stack top then pop the stack till you get a number which is greater than the current element
when you find that element add it to the top of the stack as well as the map(store element nums2[i] as the key and the value of the key is the top of stack since we want 
the next greater element.Now run a loop of size num1.length and push map elements into vector 
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        stack<int> st;
        map<int,int>mp;
        st.push(INT_MAX);
        for(int i=nums2.size()-1;i>=0;i--)
        {
            int current=nums2[i];
            if(current)
            while(st.top()<=current)
            {st.pop();}

            mp[nums2[i]]=st.top()==INT_MAX?-1:st.top();
            st.push(current);
        }
        vector<int>ans;
        for(auto it:nums1)
        {
            ans.push_back(mp[it]);
        }
        return ans;
    }
};

PRINTING A GRAPH(ADJACENCY LIST)
vector<vector<int>>clone;
        for(int i=0;i<V;i++)
        {
            vector<int>temp;
            temp.push_back(i);
            for(auto it:adj[i])
            {
               temp.push_back(it);
            }
            clone.push_back(temp);
            
        }
        return clone;// Code here
    }
