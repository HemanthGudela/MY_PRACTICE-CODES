1)Deleting Nth node froma linked list 
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) 
    {
        int count=0;
        ListNode *temp=head;
        if(head==0)
        return head;
        while(temp)
            {
                count++;
                temp=temp->next;
            }
        if(count==n)
        {
            head=head->next;//it means if head is pointing to 1st variable we are making 
            it ot point to 2nd variable and returning the head,hence the first variable is removed 
            return head;
        }
        temp=head;//everything went well here we need to re initialize temp 
        back to the head,so we could start from the 1st node
        n=count-n-1;
        count=0;
        while(temp)
        {
            if(count==n)
            {
                temp->next=temp->next->next;//it means when the count is equal to the required 
                position-1 then we could skip the the position by incrementing count->next to count->next->next
            }
            count++;
            temp=temp->next;
        }
        return head;
    }
};

2)REVERSE,SIZE,PRINT,SORT IN ASC ORDER,DESC ORDER.
void add_to_vector(vector<int> &A,int x)
{
	A.push_back(x);
}
void sort_vector_asc(vector<int> &A)
{
	sort(A.begin(),A.end());
}
void reverse_vector(vector<int> &A)
{
	reverse(A.begin(),A.end());
}
int size_of_vector(vector<int> &A)
{
	return(A.size());//Your code here
  }
void sort_vector_desc(vector<int> &A)
{
	sort(A.begin(),A.end(),greater<int>());//gretaer<data type>
}
void print_vector(vector<int> &A)
{
	for(int i=0;i<A.size();i++)
	cout<<A[i]<<" ";
}

3)CVheck if the kth bit is set or not 
1-by left shifting 1by k-1 bits and & with the binary form of N,
2-By right shifting the N by k-1 bits and perforning & with 1 
BOTH TC AND SC ARE O(1)FOR BOTH THE PROCESSES
bool checkKthBit(int n, int k)
    {
        return (1<<(k)&n)!=0;
    }
    
  4)Check if its an odd or an even integer
  
