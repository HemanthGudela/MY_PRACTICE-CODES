class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {

        queue<pair<pair<int,int>,int>>q;
        q.push({{0,0},1});
        
        if(grid[0][0]==1)return -1;
        
        if(grid[0][0]==0 && grid.size()==1 && grid[0].size()==1)return 1;
        
        vector<vector<bool>>visited(grid.size(),vector<bool>(grid.size(),false));
        visited[0][0]=true;
        while(!q.empty())
        {
            pair<int,int>p = q.front().first; 
            int x = p.first; 
            int y= p.second; 
            int lengthOfPath = q.front().second; 
            q.pop();
            
            vector<pair<int,int>>neighbours = {{0,1}, {0,-1}, {1,0}, {-1,0},
                                               {1,1}, {-1,-1}, {1,-1}, {-1,1}};
            
            for(pair<int,int>neighbour: neighbours)
            {
                int newx = neighbour.first + x;
                int newy = neighbour.second+ y;
                
         if(newx>=0 && newy>=0 && newx<grid.size() && newy<grid[0].size() && grid[newx][newy]==0 && !visited[newx][newy]){

                    q.push({{newx,newy},lengthOfPath+1});
                    visited[newx][newy] = true;
                    
                    if(newx==grid.size()-1 && newy==grid[0].size()-1)
                     return lengthOfPath+1;
           
                }      
            }
        }
        
        return -1;
        
    }
};

next Greatesr in a circular array 
INTUTION: the key factor is when i<n 
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        stack<int> st; int n=nums.size(); vector<int> ans(n,-1);
        for(int j=2*n-1;j>=0;j--)
        {
            while(!st.empty()&&nums[j%n]>=st.top())
            {
                st.pop();
            }
            //1st traversal ki manam stack ni fill chesi ready ga unchutham so second traversal appudu idhe pattern lo stack ki changes chestham so np
            if(j<n)
            {
               if(!st.empty()) ans[j]=st.top();
            }
            st.push(nums[j%n]);
        }
        return ans;
    }
};

ROTTEN ORANGES :
int orangesRotting(vector<vector<int>>& grid) {
        int m=grid.size(); int n=grid[0].size(); int visar[m][n]; 
        int cntfresh=0;
        queue< pair<pair<int,int>,int> > q;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==2)
                {
                    visar[i][j]=2;
                    q.push({{i,j},0});
                }
                else 
                {
                        visar[i][j]=0;
                }
                if(grid[i][j]==1){   cntfresh++;}
            }
        }
        int tm=0;int r,c,t,count=0;
        int drow[]={-1,0,+1,0};
        int dcol[]={0,-1,0,+1};
        while(!q.empty())
        {
            r=q.front().first.first;
            c=q.front().first.second;
            t=q.front().second;
            tm=max(tm,t);
            q.pop();
            for(int i=0;i<4;i++)
            {
                int nrow= drow[i]+r;
                int ncol= dcol[i]+c;
                if(nrow>=0&&nrow<m&&ncol>=0&&ncol<n&&visar[nrow][ncol]==0&&grid[nrow][ncol]==1)
                {
                    count++;
                    visar[nrow][ncol]=2;
                    q.push({{nrow,ncol},t+1});

                }
            }
        }
        if(count!=cntfresh) return -1;
        return tm;
    }
